name: Check firmware update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"
  push:

jobs:
  update:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - model: "SM-A2560"
            csc: "TGY"
            omc: "TGY"
            imei: "359681860424922"
          - model: "SM-A256B"
            csc: "EUX"
            omc: "EUX"
            imei: "356513701234561"
          - model: "SM-A256E"
            csc: "TPA"
            omc: "TPA"
            imei: "359665753099560"
          - model: "SM-A5360"
            csc: "CHC"
            omc: "CHC"
            imei: "353418791234567"
          - model: "SM-A536B"
            csc: "EUX"
            omc: "EUX"
            imei: "350498050045386"
          - model: "SM-A536E"
            csc: "TPA"
            omc: "TPA"
            imei: "357518816398424"
          - model: "SM-M346B"
            csc: "INS"
            omc: "INS"
            imei: "350886063201709"
          - model: "SM-M346B1"
            csc: "XEO"
            omc: "XEO"
            imei: "353257871234562"
          - model: "SM-M346B2"
            csc: "TUR"
            omc: "TUR"
            imei: "353903640123459"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Compare latest version with current version
        run: |
          need_update=0
          latest=`curl --retry 5 --retry-delay 5 http://fota-cloud-dn.ospserver.net/firmware/${{ matrix.csc }}/${{ matrix.model }}/version.xml | grep latest | sed 's/^[^>]*>//' | sed 's/<.*//'`
          latest_short=`echo $latest | cut -d'/' -f1`
          latest_csc=`echo $latest | cut -d'/' -f2`
          latest_modem=`echo $latest | cut -d'/' -f3`
          current=`cat current.${{ matrix.model }}_${{ matrix.omc }}` || need_update=1
          [[ $latest != $current ]] && need_update=1
          echo "latest_version=$latest" >> $GITHUB_ENV
          echo "latest_shortversion=$latest_short" >> $GITHUB_ENV
          echo "latest_cscversion=$latest_csc" >> $GITHUB_ENV
          echo "latest_modemversion=$latest_modem" >> $GITHUB_ENV
          echo "need_update=$need_update" >> $GITHUB_ENV

      - name: Set up Node.js
        if: env.need_update == 1
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install dependencies
        if: env.need_update == 1
        run: |
          sudo apt-get update
          sudo apt-get install -y liblz4-tool zip android-sdk-libsparse-utils f2fs-tools linux-modules-extra-$(uname -r)
          sudo wget -O /usr/bin/samfirm https://github.com/DavidArsene/samfirm.js/releases/download/v0.3.0/samfirm.js && sudo chmod +x /usr/bin/samfirm
          sudo modprobe f2fs

      - name: Fetch firmware
        if: env.need_update == 1
        run: |
          samfirm -m ${{ matrix.model }} -r ${{ matrix.csc }} -i ${{ matrix.imei }}

      - name: Get path of files
        if: env.need_update == 1
        run: |
          echo "ap_tar=`find -name AP*`" >> $GITHUB_ENV
          echo "bl_tar=`find -name BL*`" >> $GITHUB_ENV
          echo "cp_tar=`find -name CP*`" >> $GITHUB_ENV
          echo "csc_tar=`find -name CSC*`" >> $GITHUB_ENV
          echo "home_csc_tar=`find -name HOME_CSC*`" >> $GITHUB_ENV

      - name: Check downloaded firmware version
        if: env.need_update == 1
        run: |
          version_short=`echo ${{ env.ap_tar }} | cut -d'_' -f3`
          version_csc=`echo ${{ env.csc_tar }} | cut -d'_' -f4`
          version_modem=`echo ${{ env.cp_tar }} | cut -d'_' -f3`
          [[ $version_short == ${{ env.latest_shortversion }} ]]
          [[ $version_csc == ${{ env.latest_cscversion }} ]]
          [[ $version_modem == ${{ env.latest_modemversion }} ]]
          echo PDA version: $version_short > versions.txt
          echo CSC version: $version_csc >> versions.txt
          echo Modem version: $version_modem >> versions.txt

      - name: Cleanup space
        if: env.need_update == 1
        run: |
          sudo apt-get remove --purge -y "php*" "dotnet*" "mysql*" "nodejs*" "clang*" "google*"
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/local

      - name: Extract kernel images
        if: env.need_update == 1
        env:
          FILES: boot.img.lz4 dtbo.img.lz4 vbmeta.img.lz4 vendor_boot.img.lz4
        run: |
          for file in $FILES; do tar xvf ${{ env.ap_tar }} ${file}; done
          tar cvf ${{ env.latest_shortversion }}_kernel.tar *.lz4
          rm *.lz4

      - name: Extract PIT file
        if: env.need_update == 1
        run: |
          tar --wildcards --exclude='*/*' -xvf ${{ env.csc_tar }} '*.pit'
          echo "pit_file=`find -name *.pit`" >> $GITHUB_ENV

      - name: Generate patched vbmeta
        if: env.need_update == 1
        run: |
          tar xvf ${{ env.ap_tar }} vbmeta.img.lz4
          lz4 -d vbmeta.img.lz4 vbmeta.img
          rm vbmeta.img.lz4
          printf "$(printf '\\x%02X' 3)" | dd of="vbmeta.img" bs=1 seek=123 count=1 conv=notrunc &> /dev/null
          tar cvf ${{ env.latest_shortversion }}_patched_vbmeta.tar vbmeta.img
          rm vbmeta.img

      - name: Extract vendor partition
        if: env.need_update == 1
        run: |
          tar xvf ${{ env.ap_tar }} super.img.lz4
          lz4 -d super.img.lz4 super.img
          rm super.img.lz4
          simg2img super.img super_raw.img
          rm super.img
          mv super_raw.img super.img
          ./bin/lpunpack -p vendor super.img .
          rm super.img
          [[ -e vendor.img ]] && zip ${{ env.latest_shortversion }}_vendor.zip vendor.img

      - name: Get tee blobs
        if: env.need_update == 1
        run: |
           mkdir -p vendor/mount vendor/tee
           sudo mount vendor.img vendor/mount
           cp -rfa vendor/mount/tee vendor
           cd vendor
           zip -r0 --store ${{ env.latest_shortversion }}_tee.zip "tee"
           mv -f ${{ env.latest_shortversion }}_tee.zip ../
           
      - name: Get firmware blobs
        if: env.need_update == 1
        run: |
           mkdir -p vendor/firmware 
           cp -rfa vendor/mount/firmware vendor
           cd vendor
           zip -r0 --store ${{ env.latest_shortversion }}_firmware.zip "firmware"
           mv -f ${{ env.latest_shortversion }}_firmware.zip ../
           cd ../

      - name: Generate proprietary-files.txt
        if: env.need_update == 1
        run: |
           [ -f "proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}"
           cd vendor/tee
           find . -type f | sed 's|^\./||' | sort | while read -r b; do
               echo "vendor/tee/$b:vendor/tee/${{ matrix.model }}/$b|$(sha1sum "$b" | awk '{print $1}')" >> "../../proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}"
           done

           cd ../firmware
           fw_blobs=( "APDV_AUDIO_SLSI.bin" "AP_AUDIO_SLSI.bin" "NPU.bin" "calliope_sram.bin" "mfc_fw.bin" "os.checked.bin" "vts.bin" )
           sudo grep -q "m34" "../mount/build.prop" && \
               fw_blobs=( "NPU.bin" "calliope_sram.bin" "mfc_fw.bin" "os.checked.bin" "vts.bin" )

           find_cmd=(find . \( )
           for i in "${!fw_blobs[@]}"; do
               if [ $i -ne 0 ]; then
                   find_cmd+=( -o )
               fi
               find_cmd+=( -name "${fw_blobs[i]}" )
           done
           find_cmd+=( \) -type f )

           "${find_cmd[@]}" | sed 's|^\./||' | sort | while read -r b; do
                echo "vendor/firmware/$b:vendor/firmware/${{ matrix.model }}/$b|$(sha1sum "$b" | awk '{print $1}')" \
                >> "../../proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}"
           done

      - name: Generate proprietary-firmware.txt
        if: env.need_update == 1
        run: |
           mkdir bl
           cd bl
           tar xvf ../${{ env.bl_tar }}
           tar xvf ../${{ env.cp_tar }}
           lz4 -d -m *.lz4
           rm -rf *.lz4
           for i in *; do
               mv $i ${i}_${{ matrix.model }}
           done

           zip -r0 --store "../${{ env.latest_shortversion }}_BL_CP-los.zip" .

           [ -f "proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}"
           echo "${{ env.latest_shortversion }}" >> "version_${{ matrix.model }}"

           sha1sum * | awk '{print $2 "|" $1}' >> "../proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}"

      - name: Generate file_context and fs_config for TEEgris firmware
        if: env.need_update == 1
        run: |
           [ -f "file_context/file.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "file_context/file.${{ matrix.model }}_${{ matrix.omc }}"
           [ -f "fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}"
           cd vendor/tee
           find . -type f | sed 's|^\./||' | sort | while read -r b; do
               echo "/vendor/tee/${{ matrix.model }}/$b u:object_r:tee_file:s0" >> "../../file_context/file.${{ matrix.model }}_${{ matrix.omc }}"
           done
           find . -type f | sed 's|^\./||' | sort | while read -r b; do
               echo "vendor/tee/${{ matrix.model }}/$b 0 0 644 capabilities=0x0" >> "../../fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}"
           done

      - name: Unmount vendor
        if: env.need_update == 1
        run: |
           sudo umount vendor/mount
           rm -rf vendor*

      - name: Update current version
        if: env.need_update == 1
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull origin ${{github.ref}} --ff-only
          echo ${{ env.latest_version }} > current.${{ matrix.model }}_${{ matrix.omc }}
          git add current.${{ matrix.model }}_${{ matrix.omc }}
          git add proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}
          git add proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}
          git add file_context/file.${{ matrix.model }}_${{ matrix.omc }}
          git add fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}
          git commit -m "s5e8825: ${{ matrix.model }}: ${{ env.latest_version }}"
          git tag "${{ env.latest_shortversion }}_${{ matrix.omc }}"

      - name: Push changes to repo
        if: env.need_update == 1
        uses: ad-m/github-push-action@master
        with:
          tags: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        if: env.need_update == 1
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: versions.txt
          tag_name: "${{ env.latest_shortversion }}_${{ matrix.omc }}"
          name: "${{ env.latest_shortversion }} - ${{ matrix.model }} - ${{ matrix.omc }}"
          files: |
            ${{ env.bl_tar }}
            ${{ env.cp_tar }}
            ${{ env.home_csc_tar }}
            ${{ env.latest_shortversion }}_kernel.tar
            ${{ env.pit_file }}
            ${{ env.latest_shortversion }}_patched_vbmeta.tar
            ${{ env.latest_shortversion }}_vendor.zip
            ${{ env.latest_shortversion }}_tee.zip
            ${{ env.latest_shortversion }}_firmware.zip
            ${{ env.latest_shortversion }}_BL_CP-los.tar

