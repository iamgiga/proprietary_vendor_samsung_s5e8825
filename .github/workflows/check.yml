name: Check firmware update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 */3 * *"
  push:

jobs:
  update:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - model: "SM-A2560"
            csc: "TGY"
            omc: "TGY"
            imei: "359681860424922"
          - model: "SM-A256B"
            csc: "EUX"
            omc: "EUX"
            imei: "356513701234561"
          - model: "SM-A256E"
            csc: "TPA"
            omc: "TPA"
            imei: "359665753099560"
          - model: "SM-A5360"
            csc: "CHC"
            omc: "CHC"
            imei: "353418791234567"
          - model: "SM-A536B"
            csc: "EUX"
            omc: "EUX"
            imei: "350498050045386"
          - model: "SM-A536E"
            csc: "TPA"
            omc: "TPA"
            imei: "357518816398424"
          - model: "SM-M346B"
            csc: "INS"
            omc: "INS"
            imei: "350886063201709"
          - model: "SM-M346B1"
            csc: "XEO"
            omc: "XEO"
            imei: "353257871234562"
          - model: "SM-M346B2"
            csc: "TUR"
            omc: "TUR"
            imei: "353903640123459"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - name: Compare latest version with current version
        id: check_update
        run: |
          latest=$(curl --retry 5 --retry-delay 5 http://fota-cloud-dn.ospserver.net/firmware/${{ matrix.csc }}/${{ matrix.model }}/version.xml | grep latest | sed 's/^[^>]*>//' | sed 's/<.*//')
          current=$(cat current.${{ matrix.model }}_${{ matrix.omc }} 2>/dev/null)
          if [[ "$latest" != "$current" ]]; then
            echo "need_update=true" >> $GITHUB_OUTPUT
            echo "latest_version=$latest" >> $GITHUB_ENV
            echo "latest_shortversion=$(echo $latest | cut -d'/' -f1)" >> $GITHUB_ENV
            echo "latest_cscversion=$(echo $latest | cut -d'/' -f2)" >> $GITHUB_ENV
            echo "latest_modemversion=$(echo $latest | cut -d'/' -f3)" >> $GITHUB_ENV
          else
            echo "need_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Cache Dependencies
        if: steps.check_update.outputs.need_update == 'true'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install dependencies
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y liblz4-tool zip android-sdk-libsparse-utils f2fs-tools linux-modules-extra-$(uname -r)
          sudo wget -O /usr/local/bin/samfirm https://github.com/DavidArsene/samfirm.js/releases/download/v0.3.0/samfirm.js && sudo chmod +x /usr/local/bin/samfirm
          sudo modprobe f2fs

      - name: Fetch firmware
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          # Download firmware to the runner's temporary directory
          samfirm -m ${{ matrix.model }} -r ${{ matrix.csc }} -i ${{ matrix.imei }} -o "${{ runner.temp }}/firmware"

      - name: Get path of files
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          # Find the downloaded files in the temporary directory
          echo "ap_tar=$(find ${{ runner.temp }}/firmware -name 'AP_*.tar.md5')" >> $GITHUB_ENV
          echo "bl_tar=$(find ${{ runner.temp }}/firmware -name 'BL_*.tar.md5')" >> $GITHUB_ENV
          echo "cp_tar=$(find ${{ runner.temp }}/firmware -name 'CP_*.tar.md5')" >> $GITHUB_ENV
          echo "csc_tar=$(find ${{ runner.temp }}/firmware -name 'CSC_*.tar.md5')" >> $GITHUB_ENV
          echo "home_csc_tar=$(find ${{ runner.temp }}/firmware -name 'HOME_CSC_*.tar.md5')" >> $GITHUB_ENV

      - name: Check downloaded firmware version
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          version_short=$(basename "${{ env.ap_tar }}" | cut -d'_' -f3)
          version_csc=$(basename "${{ env.csc_tar }}" | cut -d'_' -f4)
          version_modem=$(basename "${{ env.cp_tar }}" | cut -d'_' -f3)
          if [[ "$version_short" != "${{ env.latest_shortversion }}" || "$version_csc" != "${{ env.latest_cscversion }}" || "$version_modem" != "${{ env.latest_modemversion }}" ]]; then
            echo "::error::Version mismatch, exiting."
            exit 1
          fi
          echo "PDA version: $version_short" > versions.txt
          echo "CSC version: $version_csc" >> versions.txt
          echo "Modem version: $version_modem" >> versions.txt

      - name: Cleanup space
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc

      - name: Extract All Required Files
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          # Extract files from archives into a workspace inside the temp directory
          mkdir -p "${{ runner.temp }}/workspace"
          echo "Extracting files from AP archive..."
          tar -xvf "${{ env.ap_tar }}" -C "${{ runner.temp }}/workspace" boot.img.lz4 dtbo.img.lz4 vbmeta.img.lz4 vendor_boot.img.lz4 super.img.lz4
          echo "Extracting PIT file from CSC archive..."
          tar --wildcards --exclude='*/*' -xvf "${{ env.csc_tar }}" -C "${{ runner.temp }}/workspace" '*.pit'

      - name: Extract kernel images
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          tar -cvf "${{ github.workspace }}/${{ env.latest_shortversion }}_kernel.tar" -C "${{ runner.temp }}/workspace" boot.img.lz4 dtbo.img.lz4 vbmeta.img.lz4 vendor_boot.img.lz4

      - name: Extract PIT file
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          echo "pit_file=$(find ${{ runner.temp }}/workspace -name '*.pit')" >> $GITHUB_ENV

      - name: Generate patched vbmeta
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          lz4 -d "${{ runner.temp }}/workspace/vbmeta.img.lz4" "${{ runner.temp }}/workspace/vbmeta.img"
          printf "$(printf '\\x%02X' 3)" | dd of="${{ runner.temp }}/workspace/vbmeta.img" bs=1 seek=123 count=1 conv=notrunc &> /dev/null
          tar cvf "${{ github.workspace }}/${{ env.latest_shortversion }}_patched_vbmeta.tar" -C "${{ runner.temp }}/workspace" vbmeta.img

      - name: Extract vendor partition
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          lz4 -d "${{ runner.temp }}/workspace/super.img.lz4" "${{ runner.temp }}/super.img"
          simg2img "${{ runner.temp }}/super.img" "${{ runner.temp }}/super_raw.img"
          # Extract vendor.img into the temp directory
          ./bin/lpunpack -p vendor "${{ runner.temp }}/super_raw.img" "${{ runner.temp }}"
          # Create the final zip in the main workspace
          [[ -e "${{ runner.temp }}/vendor.img" ]] && zip "${{ github.workspace }}/${{ env.latest_shortversion }}_vendor.zip" -j "${{ runner.temp }}/vendor.img"

      - name: Get tee blobs
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          mkdir -p "${{ runner.temp }}/vendor_mount"
          sudo mount "${{ runner.temp }}/vendor.img" "${{ runner.temp }}/vendor_mount"
          # Create the final zip in the main workspace, sourcing from the mounted temp directory
          zip -r0 --store "${{ github.workspace }}/${{ env.latest_shortversion }}_tee.zip" -C "${{ runner.temp }}/vendor_mount" tee

      - name: Get firmware blobs
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          # Create the final zip in the main workspace, sourcing from the mounted temp directory
          zip -r0 --store "${{ github.workspace }}/${{ env.latest_shortversion }}_firmware.zip" -C "${{ runner.temp }}/vendor_mount" firmware

      - name: Generate proprietary-files.txt
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          [ -f "proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}"
          cd "${{ runner.temp }}/vendor_mount/tee"
          find . -type f | sed 's|^\./||' | sort | while read -r b; do
              echo "vendor/tee/$b:vendor/tee/${{ matrix.model }}/$b|$(sha1sum "$b" | awk '{print $1}')" >> "${{ github.workspace }}/proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}"
          done
          cd "${{ runner.temp }}/vendor_mount/firmware"
          fw_blobs=( "APDV_AUDIO_SLSI.bin" "AP_AUDIO_SLSI.bin" "NPU.bin" "calliope_sram.bin" "mfc_fw.bin" "os.checked.bin" "vts.bin" )
          sudo grep -q "m34" "../build.prop" && \
              fw_blobs=( "NPU.bin" "calliope_sram.bin" "mfc_fw.bin" "os.checked.bin" "vts.bin" )
          find_cmd=(find . \( )
          for i in "${!fw_blobs[@]}"; do
              if [ $i -ne 0 ]; then find_cmd+=( -o ); fi
              find_cmd+=( -name "${fw_blobs[i]}" )
          done
          find_cmd+=( \) -type f )
          "${find_cmd[@]}" | sed 's|^\./||' | sort | while read -r b; do
               echo "vendor/firmware/$b:vendor/firmware/${{ matrix.model }}/$b|$(sha1sum "$b" | awk '{print $1}')" \
               >> "${{ github.workspace }}/proprietary-files/proprietary.${{ matrix.model }}_${{ matrix.omc }}"
          done

      - name: Generate proprietary-firmware.txt
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          mkdir "${{ runner.temp }}/bl"
          tar -xvf "${{ env.bl_tar }}" -C "${{ runner.temp }}/bl"
          tar -xvf "${{ env.cp_tar }}" -C "${{ runner.temp }}/bl"
          lz4 -d -m "${{ runner.temp }}/bl"/*.lz4
          rm -f "${{ runner.temp }}/bl"/*.lz4
          cd "${{ runner.temp }}/bl"
          for i in *; do mv "$i" "${i}_${{ matrix.model }}"; done
          zip -r0 --store "${{ github.workspace }}/${{ env.latest_shortversion }}_BL_CP-los.zip" .
          [ -f "${{ github.workspace }}/proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "${{ github.workspace }}/proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}"
          echo "${{ env.latest_shortversion }}" >> "version_${{ matrix.model }}"
          sha1sum * | awk '{print $2 "|" $1}' >> "${{ github.workspace }}/proprietary-firmware/firmware.${{ matrix.model }}_${{ matrix.omc }}"

      - name: Generate file_context and fs_config for TEEgris firmware
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          [ -f "file_context/file.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "file_context/file.${{ matrix.model }}_${{ matrix.omc }}"
          [ -f "fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}" ] && rm -f "fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}"
          cd "${{ runner.temp }}/vendor_mount/tee"
          find . -type f | sed 's|^\./||' | sort | while read -r b; do
              echo "/vendor/tee/${{ matrix.model }}/$b u:object_r:tee_file:s0" >> "${{ github.workspace }}/file_context/file.${{ matrix.model }}_${{ matrix.omc }}"
          done
          find . -type f | sed 's|^\./||' | sort | while read -r b; do
              echo "vendor/tee/${{ matrix.model }}/$b 0 0 644 capabilities=0x0" >> "${{ github.workspace }}/fs_config/fs.${{ matrix.model }}_${{ matrix.omc }}"
          done

      - name: Unmount and update current version
        if: steps.check_update.outputs.need_update == 'true'
        run: |
          sudo umount "${{ runner.temp }}/vendor_mount"
          echo "${{ env.latest_version }}" > current.${{ matrix.model }}_${{ matrix.omc }}
          # The rest of the temp directory will be cleaned automatically by the runner

      - name: Commit and Push
        if: steps.check_update.outputs.need_update == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "s5e8825: ${{ matrix.model }}: ${{ env.latest_version }}"
          tagging_message: "${{ env.latest_shortversion }}_${{ matrix.omc }}"
          file_pattern: "current.${{ matrix.model }}_${{ matrix.omc }} proprietary-files/proprietary.* proprietary-firmware/firmware.* file_context/file.* fs_config/fs.*"

      - name: Upload release assets
        if: steps.check_update.outputs.need_update == 'true'
        uses: softprops/action-gh-release@v2
        with:
          body_path: versions.txt
          tag_name: "${{ env.latest_shortversion }}_${{ matrix.omc }}"
          name: "${{ env.latest_shortversion }} - ${{ matrix.model }} - ${{ matrix.omc }}"
          files: |
            ${{ env.home_csc_tar }}
            ${{ github.workspace }}/${{ env.latest_shortversion }}_kernel.tar
            ${{ env.pit_file }}
            ${{ github.workspace }}/${{ env.latest_shortversion }}_patched_vbmeta.tar
            ${{ github.workspace }}/${{ env.latest_shortversion }}_vendor.zip
            ${{ github.workspace }}/${{ env.latest_shortversion }}_tee.zip
            ${{ github.workspace }}/${{ env.latest_shortversion }}_firmware.zip
            ${{ github.workspace }}/${{ env.latest_shortversion }}_BL_CP-los.zip
